From c041722e43f93a4bc3d61fc32b79f92bd3ce668d Mon Sep 17 00:00:00 2001
From: kruppel <kurt.ruppel@gmail.com>
Date: Mon, 17 Jan 2011 15:01:40 -0800
Subject: [PATCH] - Added rough "favorite" playlist cmd
 - Started work on activities/dashboard

---
 README.txt                                 |   15 ++
 chrome/content/authorize.js                |    6 +-
 chrome/content/directory.xul               |    1 +
 chrome/content/main.js                     |   42 +++++-
 chrome/content/waveform.js                 |   26 +++-
 chrome/skin/directory.css                  |   11 +-
 components/public/sbISoundCloudService.idl |   16 ++-
 components/src/sbSoundCloud.js             |  219 ++++++++++++++++++++--------
 8 files changed, 256 insertions(+), 80 deletions(-)

diff --git a/README.txt b/README.txt
index 2d7aadc..c210546 100644
--- a/README.txt
+++ b/README.txt
@@ -28,3 +28,18 @@ encode/decode these strings.
 ### Allow for configuration of sandbox/test environment ###
 
 ### Disable edit, "dropping", and removal for directory ###
+
+### Focus authorization dialog window ###
+
+### Attempt to login to SoundCloud in the background before auth ###
+
+### [pref] Mediacore adjustments ###
+- songbird.mediacore.output.buffertime
+- songbird.mediacore.streaming.buffersize
+- refresh rate for dashboard
+
+### Download ###
+Copy over all properties
+
+### Disable editable title ###
+Not sure if this is even possible...
diff --git a/chrome/content/authorize.js b/chrome/content/authorize.js
index afeba4b..fb10da0 100644
--- a/chrome/content/authorize.js
+++ b/chrome/content/authorize.js
@@ -35,11 +35,11 @@ Cu.import("resource://app/jsmodules/WindowUtils.jsm");
 var SoundCloudAuthorize = {
   _open: function SoundCloudAuthorizeAuthorize_open() {
     this._service = Cc["@songbirdnest.com/soundcloud/service;1"]
-                      .getService().wrappedJSObject;
+                      .getService(Ci.sbISoundCloudService);
     this._browser = document.getElementById("soundcloud_auth_browser");
-    this._browser.loadURI(this._service.soundcloud_url
+    this._browser.loadURI(this._service.soundcloudURL
                           + "/oauth/authorize?oauth_token="
-                          + this._service.oauth_token
+                          + this._service.token
                           + "&display=popup");
     var self = this;
     this._domEventListenerSet = new DOMEventListenerSet();
diff --git a/chrome/content/directory.xul b/chrome/content/directory.xul
index b80e2b4..ecefa02 100644
--- a/chrome/content/directory.xul
+++ b/chrome/content/directory.xul
@@ -76,6 +76,7 @@
                  enableColumnDrag="true"
                  persist="column-list column-widths"
                  hidecolumnpicker="true"
+                 disabled="false"
                  editable="false"/>
     <hbox flex="1" align="center" hidden="true">
       <vbox flex="1" align="center">
diff --git a/chrome/content/main.js b/chrome/content/main.js
index 637607d..e428d5e 100644
--- a/chrome/content/main.js
+++ b/chrome/content/main.js
@@ -374,15 +374,37 @@ SoundCloud._initCommands = function SoundCloud__initCommands() {
                                                 "soundcloud_cmd_download",
                                                 plCmd_IsSelectionDownloadable);
   this.m_mgr.publish("soundcloud-download@sb.com", this.m_cmd_Download);
+  this.m_cmd_Favorite = new PlaylistCommandsBuilder("favorite-soundcloud-cmd");
+  this.m_cmd_Favorite.appendAction(null,
+                                   "soundcloud_cmd_favorite",
+                                   "Favorite",
+                                   "Favorite track",
+                                   plCmd_Favorite_TriggerCallback);
+  /*this.m_cmd_Favorite.setCommandShortcut(null,
+                                         "soundcloud_cmd_favorite",
+                                         "&command.shortcut.key.favorite",
+                                         "&command.shortcut.keycode.favorite",
+                                         "&command.shortcut.modifiers.favorite",
+                                         true);*/
+  this.m_cmd_Favorite.setCommandVisibleCallback(null,
+                                                "soundcloud_cmd_favorite",
+                                                plCmd_IsSelectionFavoriteable);
+  this.m_mgr.publish("soundcloud-favorite@sb.com", this.m_cmd_Favorite);
   this.m_soundcloudCommands = new PlaylistCommandsBuilder("soundcloud_cmds");
   this.m_soundcloudCommands.appendPlaylistCommands(null,
                                                    "soundcloud_cmd_download",
                                                    this.m_cmd_Download);
+  this.m_soundcloudCommands.appendPlaylistCommands(null,
+                                                   "soundcloud_cmd_favorite",
+                                                   this.m_cmd_Favorite);
   this.m_soundcloudCommands.setVisibleCallback(plCmd_HideForToolbarCheck);
   this.m_mgr.publish("soundcloud-cmds@sb.com", this.m_soundcloudCommands);
 
   // Called when the download action is triggered
-  function plCmd_Download_TriggerCallback(aContext, aSubMenuId, aCommandId, aHost) {
+  function plCmd_Download_TriggerCallback(aContext,
+                                          aSubMenuId,
+                                          aCommandId,
+                                          aHost) {
     // if something is selected, trigger the download event on the playlist
     if (plCmd_IsAnyTrackSelected(aContext, aSubMenuId, aCommandId, aHost)) {
       var ddh = Cc["@songbirdnest.com/Songbird/DownloadDeviceHelper;1"]
@@ -448,6 +470,23 @@ SoundCloud._initCommands = function SoundCloud__initCommands() {
     }
   }
 
+  function plCmd_Favorite_TriggerCallback(aContext, aSubMenuId, aCommandId, aHost) {
+      var playlist = unwrap(aContext.playlist);
+      var selectedEnum = playlist.mediaListView.selection.selectedMediaItems;
+
+      var curItem = selectedEnum.getNext()
+                                .QueryInterface(Ci.sbIMediaItem)
+      if (curItem) {
+        var trackId = curItem.getProperty(SB_PROPERTY_TRACK_ID);
+        if (trackId)
+          self._service.putFavorite(trackId);
+      }
+  }
+
+  function plCmd_IsSelectionFavoriteable(aContext, aSubMenuId, aCommandId, aHost) {
+    return true;
+  }
+
   // Returns true when at least one track is selected in the playlist
   function plCmd_IsAnyTrackSelected(aContext, aSubMenuId, aCommandId, aHost) {
     return (unwrap(aContext.playlist).mediaListView.selection.count != 0);
@@ -529,6 +568,7 @@ function SoundCloud__getElement(aWidget, aElementID) {
 SoundCloud.onUnload = function SoundCloud_onUnload() {
   this._service.removeListener(this);
   this.m_mgr.withdraw("soundcloud-download@sb.com", this.m_cmd_Download);
+  this.m_mgr.withdraw("soundcloud-favorite@sb.com", this.m_cmd_Favorite);
   this.m_mgr.withdraw("soundcloud-cmds@sb.com", this.m_soundcloudCommands);
 
   if (this._domEventListenerSet) {
diff --git a/chrome/content/waveform.js b/chrome/content/waveform.js
index c61d3b4..4b3689b 100644
--- a/chrome/content/waveform.js
+++ b/chrome/content/waveform.js
@@ -74,6 +74,23 @@ function SoundClouWaveform_onLoad() {
   this.remote_length = SBNewDataRemote("metadata.length", null);
   this.remote_length.bindObserver(dataRemoteListener, true);
   this.onPositionChanged();
+
+  this._domEventListenerSet = new DOMEventListenerSet();
+  var onWaveformClicked = function(event) {
+    var boxObject = event.target.parentNode.getBoundingClientRect();
+    var rel_pos = event.clientX / boxObject.width;
+    try {
+      gMM.playbackControl.position = rel_pos * self.remote_length.intValue;
+    } catch(e) {
+      Cu.reportError(e);
+    }
+  }
+
+  this._domEventListenerSet.add(this._wfdisplay,
+                                "click",
+                                onWaveformClicked,
+                                false,
+                                false);
 }
 
 SoundCloudWaveform.onPositionChanged =
@@ -102,12 +119,8 @@ function SoundCloudWaveform_onMediacoreEvent(aEvent) {
       }
       break;
     case Ci.sbIMediacoreEvent.SEQUENCE_CHANGE:
-      dump("\nSEQUENCECHANGE\nposition: " + gMM.sequencer.viewPosition +
-           "index: " + gMM.sequencer.currentItem + "\n");
       break;
     case Ci.sbIMediacoreEvent.VIEW_CHANGE:
-      dump("\nVIEWCHANGE\nposition: " + gMM.sequencer.viewPosition +
-           "index: " + gMM.sequencer.currentItem + "\n");
       break;
     default:
       break;
@@ -117,6 +130,11 @@ function SoundCloudWaveform_onMediacoreEvent(aEvent) {
 SoundCloudWaveform.onUnload =
 function SoundCloudWaveform_onUnload(aEvent) {
   gMM.removeListener(this);
+
+  if (this._domEventListenerSet) {
+    this._domEventListenerSet.removeAll();
+    this._domEventListenerSet = null;
+  }
 }
 
 window.addEventListener("load",
diff --git a/chrome/skin/directory.css b/chrome/skin/directory.css
index 0a16bbf..0b5ea75 100644
--- a/chrome/skin/directory.css
+++ b/chrome/skin/directory.css
@@ -106,8 +106,9 @@ treecol[bind="http://songbirdnest.com/data/1.0#user"] > label,
 #soundcloud-intro {
   background-color: white;
   border: 2px solid #B6CEE6;
-  margin: 0px 80px;
-  opacity: 0.7;
+  /*margin: 0px 80px;*/
+  line-height: 16px;
+  opacity: 0.8;
   padding: 10px;
   -moz-border-radius: 6px;
   -moz-box-align: center;
@@ -118,9 +119,9 @@ treecol[bind="http://songbirdnest.com/data/1.0#user"] > label,
 #soundcloud-intro > description {
   color: #06C;
   font-family: 'Lucida Grande', Arial, Helvetica, Verdana, sans-serif;
-  font-size: 18px;
-  height: 250px;
-  width: 300px;
+  /*font-size: 18px;*/
+  height: 50px;
+  width: 150px;
   min-width: 240px;
   -moz-box-flex: 1;
 }
diff --git a/components/public/sbISoundCloudService.idl b/components/public/sbISoundCloudService.idl
index afe5bbc..48893e5 100644
--- a/components/public/sbISoundCloudService.idl
+++ b/components/public/sbISoundCloudService.idl
@@ -38,9 +38,9 @@ interface sbISoundCloudUser : nsISupports
 [scriptable, uuid(dc9d69d0-1dd1-11b2-b9d6-cd32e6338c4d)]
 interface sbISoundCloudService : nsISupports 
 {
-  attribute AString nowplaying_url;
+  attribute AString nowPlayingURL;
 
-  readonly attribute AString soundcloud_url;
+  readonly attribute AString soundcloudURL;
 
   readonly attribute sbISoundCloudUser user;
 
@@ -48,7 +48,7 @@ interface sbISoundCloudService : nsISupports
 
   readonly attribute AString password;
 
-  readonly attribute AString oauth_token;
+  readonly attribute AString token;
 
   attribute PRBool userLoggedOut;
 
@@ -60,6 +60,8 @@ interface sbISoundCloudService : nsISupports
 
   readonly attribute sbILibrary library;
   
+  readonly attribute sbILibrary dashboard;
+  
   readonly attribute sbILibrary favorites;
 
   readonly attribute sbILibrary downloads;
@@ -82,13 +84,17 @@ interface sbISoundCloudService : nsISupports
 
   void updateProfile(in boolean aSavedSession);
 
-  void getFavorites();
-
   void getTracks(in PRint32 aUserId,
                  in AString aQuery,
                  in AString aFlags,
                  in PRint32 aOffset);
 
+  void getDashboard();
+
+  void getFavorites();
+
+  void putFavorite(in Print32 aTrackId);
+
   void addListener(in sbISoundCloudListener aListener);
 
   void removeListener(in sbISoundCloudListener aListener);
diff --git a/components/src/sbSoundCloud.js b/components/src/sbSoundCloud.js
index aa0a59c..ae11e62 100644
--- a/components/src/sbSoundCloud.js
+++ b/components/src/sbSoundCloud.js
@@ -251,6 +251,43 @@ function POST(url, params, onload, onerror) {
   return xhr;
 }
 
+function PUT(url, params, onload, onerror) {
+  var xhr = null;
+
+  try {
+    xhr = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"].createInstance();
+    xhr.mozBackgroundRequest = true;
+    xhr.onload = function(event) { onload(xhr); }
+    xhr.onerror = function(event) { onerror(xhr); }
+    xhr.open('PUT', url + "?" + params, true);
+    xhr.send();
+  } catch(e) {
+    Cu.reportError(e);
+    onerror(xhr);
+  }
+  return xhr;
+}
+
+function DELETE_(url, params, onload, onerror) {
+  var xhr = null;
+
+  try {
+    xhr = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"].createInstance();
+    xhr.mozBackgroundRequest = true;
+    xhr.onload = function(event) { onload(xhr); }
+    xhr.onerror = function(event) { onerror(xhr); }
+    xhr.open('DELETE', url, true);
+    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
+    xhr.setRequestHeader("Content-length", params.length);
+    xhr.setRequestHeader("Connection", "close");
+    xhr.send(params);
+  } catch(e) {
+    Cu.reportError(e);
+    onerror(xhr);
+  }
+  return xhr;
+}
+
 /**
  *
  */
@@ -648,14 +685,14 @@ function sbSoundCloudService() {
   }
 
   this._nowplaying_url = null;
-  this.__defineGetter__('nowplaying_url', function() {
+  this.__defineGetter__('nowPlayingURL', function() {
     return this._nowplaying_url;
   });
-  this.__defineSetter__('nowplaying_url', function(val) {
+  this.__defineSetter__('nowPlayingURL', function(val) {
     this._nowplaying_url = val;
   });
 
-  this.__defineGetter__('soundcloud_url', function() {
+  this.__defineGetter__('soundcloudURL', function() {
     return SOCL_URL;
   });
 
@@ -674,7 +711,7 @@ function sbSoundCloudService() {
     return this._password;
   });
 
-  this.__defineGetter__("oauth_token", function() {
+  this.__defineGetter__("token", function() {
     let pref = this.username + ".oauth_token";
     this._oauth_token = (this._prefs.prefHasUserValue(pref)) ?
                          atob(this._prefs.getCharPref(pref)) : null;
@@ -717,7 +754,7 @@ function sbSoundCloudService() {
 
   // get the playback history service
   this._playbackHistory =
-      Cc['@songbirdnest.com/Songbird/PlaybackHistoryService;1']
+      Cc["@songbirdnest.com/Songbird/PlaybackHistoryService;1"]
         .getService(Ci.sbIPlaybackHistoryService);
   // add ourselves as a playlist history listener
   this._playbackHistory.addListener(this);
@@ -725,18 +762,18 @@ function sbSoundCloudService() {
   this._library = this._getLibrary(Libraries.SEARCH, null);
   this._downloads = this._getLibrary(Libraries.DOWNLOADS, null);
 
-  this.__defineGetter__('library', function() { return this._library; });
-  this.__defineGetter__('dashboard', function() {
+  this.__defineGetter__("library", function() { return this._library; });
+  this.__defineGetter__("dashboard", function() {
     let dashLib = (this._dashboard) ? this._dashboard : null;
     return dashLib;
   });
-  this.__defineGetter__('favorites', function() {
+  this.__defineGetter__("favorites", function() {
     let favLib = (this._favorites) ? this._favorites : null;
     return favLib;
   });
-  this.__defineGetter__('downloads', function() { return this._downloads; });
+  this.__defineGetter__("downloads", function() { return this._downloads; });
 
-  this.__defineGetter__('lastSearch', function() {
+  this.__defineGetter__("lastSearch", function() {
       if (!this._searchService)
         return;
 
@@ -823,10 +860,10 @@ sbSoundCloudService.prototype = {
                                                       "soclfollowingcount");
       followingBadge.label = this.followingCount;
       followingBadge.visible = true;
-
+      */
       // Create dashboard node
       var dashNode = this._servicePaneService
-                        .getNode("urn:soclfavorites");
+                         .getNode("urn:socldashboard");
       if (!dashNode) {
         dashNode = this._servicePaneService.createNode();
         dashNode.url=
@@ -837,13 +874,12 @@ sbSoundCloudService.prototype = {
         dashNode.editable = false;
         dashNode.setAttributeNS(SP_NS, "Weight", 5);
         soclNode.appendChild(dashNode);
-        dashNode.hidden = true;
+        dashNode.hidden = false;
       }
 
-      var dashBadge = ServicePaneHelper.getBadge(dashNode, "socldashboard");
-      dashBadge.label = this.incomingCount;
-      dashBadge.visible = true;
-      */
+      //var dashBadge = ServicePaneHelper.getBadge(dashNode, "socldashboard");
+      //dashBadge.label = this.incomingCount;
+      //dashBadge.visible = true;
    
       // Create favorites node
       var favNode = this._servicePaneService
@@ -866,7 +902,7 @@ sbSoundCloudService.prototype = {
       favBadge.label = this.user.favCount;
       favBadge.visible = true;
    
-      this._dashboard = this._getLibrary(Libraries.DASHBOARD, null);
+      this._dashboard = this._getLibrary(Libraries.DASHBOARD, this._user.userid);
       this._favorites = this._getLibrary(Libraries.FAVORITES, this._user.userid);
     } else {
       while (soclNode.firstChild) {
@@ -898,7 +934,7 @@ sbSoundCloudService.prototype = {
     this._token_secret = (this._prefs.prefHasUserValue(secretPref)) ?
                           atob(this._prefs.getCharPref(secretPref)) : null;
     if (!aClearSession) {
-      if (this.oauth_token && this._token_secret)
+      if (this._oauth_token && this._token_secret)
         return this.updateProfile(true);
     } else {
       this._prefs.clearUserPref(this.username + ".oauth_token");
@@ -1000,47 +1036,6 @@ sbSoundCloudService.prototype = {
     this._info_xhr = GET(url, params, success, failure, true);
   },
 
-  getDashboard: function sbSoundCloudService_getDashboard() {
-
-  },
-
-  getFavorites: function sbSoundCloudService_getFavorites() {
-    var self = this;
-    if (!this.loggedIn)
-      return;
-
-    if (!this._fav_retries)
-      this._fav_retries = 0;
-
-    var url = SOCL_URL + "/me/favorites.json";
-    var success = function(xhr) {
-      let json = xhr.responseText;
-      let favorites = JSON.parse(json);
-      if (favorites.error) {
-        if (self._fav_retries < MAX_RETRIES) {
-          self._fav_retries++;
-          self.getFavorites();
-        } else {
-          Cu.reportError("Unable to retrieve favorites: " + favorites.error);
-          return false;
-        }
-      }
-
-      self.user._favCount = favorites.length;
-      self._addItemsToLibrary(favorites, self._favorites);
-    }
-
-    var failure = function(xhr) {
-      dump("\nUnable to retrieve favorites.");
-      dump("\nStatus is " + xhr.status + "\n" + xhr.getAllResponseHeaders());
-      self._fav_retries = null;
-      return false;
-    }
-
-    var params = this._getParameters(url, "GET");
-    this._fav_xhr = GET(url, params, success, failure, true);
-  },
-
   getTracks:
   function sbSoundCloudService_getTracks(aUserId, aQuery, aFlags, aOffset) {
     var self = this;
@@ -1073,6 +1068,7 @@ sbSoundCloudService.prototype = {
         } else {
           Cu.reportError("Unable to retrieve tracks: " + tracks.error);
           self._track_retries = null;
+          self._track_xhr = null;
           return false;
         }
       }
@@ -1082,7 +1078,9 @@ sbSoundCloudService.prototype = {
       if (tracks.length > 40) {
         self._track_retries = null;
         aOffset += tracks.length
-        self._track_xhr = self.getTracks(aUserId, aQuery, aFlags, aOffset);
+        self.getTracks(aUserId, aQuery, aFlags, aOffset);
+      } else {
+        self._track_xhr = null;
       }
     }
 
@@ -1098,9 +1096,106 @@ sbSoundCloudService.prototype = {
     this._track_xhr = GET(url, params, success, failure, false);
   },
 
+  getDashboard: function sbSoundCloudService_getDashboard() {
+    if (!this.loggedIn)
+      return;
+
+    if (this._dash_xhr) {
+      this._dash_xhr.abort();
+    } else if (!this._dash_retries) {
+      this._dash_retries = 0;
+    }
+
+    var url = SOCL_URL + "/me/activities/tracks.json";
+    var success = function(xhr) {
+      let json = xhr.responseText;
+      let activities = JSON.parse(json);
+      if (activities.error) {
+        if (self._dash_retries < MAX_RETRIES) {
+          self._dash_retries++;
+          self.getDashboard();
+        } else {
+          Cu.reportError("Unable to retrieve activities: " + activities.error);
+          self._dash_xhr = null;
+          return false;
+        }
+      }
+
+      dump("\n" + json + "\n");
+    }
+
+    var failure = function(xhr) {
+      dump("\nUnable to retrieve activities.");
+      dump("\nStatus is " + xhr.status + "\n" + xhr.getAllResponseHeaders());
+      self._dash_xhr = null;
+      self._dash_retries = null;
+      return false;
+    }
+
+    var params = this._getParameters(url, "GET");
+    this._dash_xhr = GET(url, params, success, failure, true);
+  },
+
+  getFavorites: function sbSoundCloudService_getFavorites() {
+    var self = this;
+    if (!this.loggedIn)
+      return;
+
+    if (this._fav_xhr) {
+      this._fav_xhr.abort();
+    } else if (!this._fav_retries) {
+      this._fav_retries = 0;
+    }
+
+    var url = SOCL_URL + "/me/favorites.json";
+    var success = function(xhr) {
+      let json = xhr.responseText;
+      let favorites = JSON.parse(json);
+      if (favorites.error) {
+        if (self._fav_retries < MAX_RETRIES) {
+          self._fav_retries++;
+          self.getFavorites();
+        } else {
+          Cu.reportError("Unable to retrieve favorites: " + favorites.error);
+          self._fav_xhr = null;
+          return false;
+        }
+      }
+
+      self.user._favCount = favorites.length;
+      self._addItemsToLibrary(favorites, self._favorites);
+      self._fav_xhr = null;
+    }
+
+    var failure = function(xhr) {
+      dump("\nUnable to retrieve favorites.");
+      dump("\nStatus is " + xhr.status + "\n" + xhr.getAllResponseHeaders());
+      self._fav_xhr = null;
+      self._fav_retries = null;
+      return false;
+    }
+
+    var params = this._getParameters(url, "GET");
+    this._fav_xhr = GET(url, params, success, failure, true);
+  },
+
   putFavorite:
-  function sbSoundCloudService_putFavorite() {
+  function sbSoundCloudService_putFavorite(aTrackId) {
+    if (!this.loggedIn)
+      return;
+
+    var url = SOCL_URL + "/me/favorites/" + aTrackId;
+    var success = function(xhr) {
+      Cu.reportError(xhr.responseText);
+    }
+
+    var failure = function(xhr) {
+      Cu.reportError(xhr.responseText);
+      return false;
+    }
 
+    var params = this._getParameters(url, "PUT");
+    PUT(url, params, success, failure);
   },
 
   addListener: function sbSoundCloudService_addListener(aListener) {
-- 
1.7.0.4

