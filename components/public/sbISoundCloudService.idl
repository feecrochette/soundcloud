/*
 */

#include "nsISupports.idl"

interface sbILibrary;
interface sbIMediaItem;
interface sbISoundCloudUser;
interface sbISoundCloudListener;

/*
 * \interface sbISoundCloudUser
 * \brief
 */
[scriptable, uuid(48f401c8-1dd2-11b2-8c8e-c9a9274b517a)]
interface sbISoundCloudUser : nsISupports 
{
  readonly attribute AString userid;

  readonly attribute AString permalink;

  readonly attribute AString realname;

  readonly attribute AString avatar;

  readonly attribute PRint32 followingCount;

  readonly attribute PRint32 incomingCount;

  readonly attribute PRint32 favCount;

  readonly attribute AString city;

  readonly attribute AString country;

  readonly attribute AString profileurl;

  void createRelationship(in PRint32 aFollowingId);

  boolean hasRelationship(in PRint32 aFollowingId);

  void deleteRelationship(in PRint32 aFollowingId);
};

/*
 * \interface sbISoundCloudService
 * \brief
 */
[scriptable, uuid(dc9d69d0-1dd1-11b2-b9d6-cd32e6338c4d)]
interface sbISoundCloudService : nsISupports 
{
  attribute AString nowPlayingURL;

  attribute sbILibrary activeLibrary;

  readonly attribute AString soundcloudURL;

  readonly attribute sbISoundCloudUser user;

  readonly attribute AString username;

  readonly attribute AString password;

  readonly attribute AString token;

  attribute PRBool userLoggedOut;

  attribute boolean autoLogin;

  attribute boolean loggedIn;

  attribute boolean authorized;

  attribute boolean running;

  readonly attribute sbILibrary library;
  
  readonly attribute sbILibrary dashboard;
  
  readonly attribute sbILibrary favorites;

  readonly attribute sbILibrary downloads;

  readonly attribute AString lastSearch;

  void updateServicePaneNodes();

  boolean shouldAutoLogin();

  void login(in AString aUsername,
             in AString aPassword,
             in boolean aClearSession);

  void logout();

  void cancelLogin();

  void authCallback();

  void updateProfile(in boolean aSavedSession);

  void getTracks(in AString aUser,
                 in AString aQuery,
                 in AString aFlags,
                 in PRint32 aOffset);

  nsISupports getDashboard([optional] in AString aCursor);

  nsISupports getFavorites([optional] in PRint32 aUserId,
                           [optional] in PRint32 aOffset);

  void favoriteTrack(in sbIMediaItem aTrack, in boolean aFavorite);

  void followUser(in PRint32 aUserId,
                  in AString aUsername,
                  in boolean aFollowing);

  nsISupports getFollowings([optional] in PRint32 aUserId,
                            [optional] in PRint32 aOffset);

  void addListener(in sbISoundCloudListener aListener);

  void removeListener(in sbISoundCloudListener aListener);

  void notifyListeners(in AString aEventTrigger,
                       [optional] in nsISupports aArgs);

  void shutdown();
};

/*
 * \interface sbISoundCloudListener
 * \brief
 */
[scriptable, uuid(2e2cffaf-6b36-4e69-ba4d-732dfe8d8d88)]
interface sbISoundCloudListener : nsISupports 
{
  void onLoginBegins();

  void onLogout();

  void onAutoLoginChanged();

  void onLoggedInStateChanged();

  void onProfileUpdated();

  void onSearchTriggered();

  void onSearchCompleted(in sbILibrary aLibrary);

  void onTracksAdded(in sbILibrary aLibrary);

  void onDashboardRefresh();

  void onFavorite(in sbIMediaItem aFavorite);

  void onUnavorite(in sbIMediaItem aFavorite);

  void onFollowing(in AString aFollowing);

  void onUnfollowing(in AString aFollowing);
};
